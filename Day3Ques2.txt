public class Main
{
    static boolean onBoard(int i, int j){
        if(i >= 0 && i < 8 && j >= 0 && j < 8)
            return true;
        return false;
    }
    
    static boolean checkHorse(char[][] board,char c, int i, int j)
    {
        int movesx[] = {2, 2, -1, 1,-2, -2, 1, -1};
        int movesy[] = {1, -1, 1, -1,2, -2, 2, -2};

        for (int k = 0; k < 8; k++)
        {
            int newX = i + movesx[k];
            int newY = j + movesy[k];

            if (onBoard(newX, newY) && board[newX][newY] == c)
            return true;
        }
    return false;
    }
    
    static boolean checkQueen(char[][] board,char c, int i, int j)
    {

        if (checkCamel(board, c, i, j) || checkElephant(board, c, i, j))
            return true;
 
        return false;
    }
    
    static boolean checkCamel(char[][] board,char c, int i, int j)
    {
 
        // Check the lower right diagonal
        int k = 0;
        while (onBoard(i + ++k, j + k)) {
 
            if (board[i + k][j + k] == c)
                return true;
            if (board[i + k][j + k] != '-')
                break;
        }
 
        // Check the lower left diagonal
        k = 0;
        while (onBoard(i + ++k, j - k)) {
 
            if (board[i + k][j - k] == c)
                return true;
            if (board[i + k][j - k] != '-')
                break;
        }
 
        // Check the upper right diagonal
        k = 0;
        while (onBoard(i - ++k, j + k)) {
 
            if (board[i - k][j + k] == c)
                return true;
            if (board[i - k][j + k] != '-')
                break;
        }
 
        // Check the upper left diagonal
        k = 0;
        while (onBoard(i - ++k, j - k)) {
 
            if (board[i - k][j - k] == c)
                return true;
            if (board[i - k][j - k] != '-')
                break;
        }
 
        return false;
    }
    
    private static boolean checkElephant(char[][] board,char c, int i, int j)
    {
 
        // Check downwards
        int k = 0;
        while (onBoard(i + ++k, j)) {
            if (board[i + k][j] == c)
                return true;
            if (board[i + k][j] != '-')
                break;
        }
 
        // Check upwards
        k = 0;
        while (onBoard(i + --k, j)) {
            if (board[i + k][j] == c)
                return true;
            if (board[i + k][j] != '-')
                break;
        }
 
        // Check right
        k = 0;
        while (onBoard(i, j + ++k)) {
            if (board[i][j + k] == c)
                return true;
            if (board[i][j + k] != '-')
                break;
        }
 
        // Check left
        k = 0;
        while (onBoard(i, j + --k)) {
            if (board[i][j + k] == c)
                return true;
            if (board[i][j + k] != '-')
                break;
        }
        return false;
    }
    
    static int isKingSafe(char[][] board)
    {
 

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
 

                if (board[i][j] == 'K') {
 

                    if (checkHorse(board, 'H', i, j))
                        return 1;
 
                    if (checkElephant(board, 'E', i, j))
                        return 1;
 

                    if (checkCamel(board, 'C', i, j))
                        return 1;
 
                    if (checkQueen(board, 'Q', i, j))
                        return 1;
 
                }
 
            }
        }
        return 0;
    }
    
    
	public static void main(String[] args) {
		char chessBoard[][] = {
            {'-', '-', '-', 'K', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-'},
            { '-', '-', '-','-', '-', '-', 'E', '-'},
            {'-', '-', 'H', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-'},
            {'Q', '-', '-', '-', '-', '-', '-', '-'},
            {'C', '-', '-', '-', '-', '-', '-', '-'}
            };
            
        if (isKingSafe(chessBoard) == 0){
               System.out.println(("King is safe"));
        }
        else if (isKingSafe(chessBoard) == 1){
          System.out.println(("King is unsafe"));
        }
	}
}
